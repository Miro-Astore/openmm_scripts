"""
Generated by CHARMM-GUI (http://www.charmm-gui.org)

openmm_run.py

This program is OpenMM running scripts written in python.

Correspondance: jul316@lehigh.edu or wonpil@lehigh.edu
Last update: June 18, 2021
"""

from __future__ import print_function
import argparse
import threading
import sys
import os
import numpy as np

import pdb
import rlcompleter

#pdb.Pdb.complete=rlcompleter.Completer(locals()).complete

from openmm_workflow.utilities.omm_readinputs import *
from openmm_workflow.utilities.omm_readparams import *
from openmm_workflow.utilities.omm_vfswitch import *
from openmm_workflow.utilities.omm_barostat import *
from openmm_workflow.utilities.omm_restraints import *
from openmm_workflow.utilities.omm_rewrap import *

from simtk.unit import *
from openmm import *
from openmm.app import *

from openmmtools import integrators, states, mcmc
#from openmmtools.states import ThermodynamicState, SamplerState
#from openmmtools.collectivevariables import *
#from openmmtools.metadynamics import *




# Adjust the collective variable definition to use the CenterOfMass difference
#CenterOfMass_cv = CustomCV ('sqrt ((com1_x-com2_x)^2 +(com1_y-com2_y)^2  + (com1_z-com2_z)^2 )')
#
#group1_COM = CenterOfMass_cv(group1_indices)
#group2_COM = CenterOfMass_cv(group2_indices)


#class COMDifference(CollectiveVariable):
#    def __init__(self, com1, com2):
#        self.com1 = com1
#        self.com2 = com2
#
#    def _evaluate(self, thermodynamic_state, sampler_state):
#        com1_value = self.com1._evaluate(thermodynamic_state, sampler_state)
#        com2_value = self.com2._evaluate(thermodynamic_state, sampler_state)
#        
#        return np.linalg.norm(com1_value - com2_value) * unit.nanometers
#
#    def _get_standard_deviation(self, thermodynamic_state):
#        return 0.1 * unit.nanometers
#
#cv = COMDifference(group1_COM, group2_COM)

#CustomCVForce('')


#from openmmtools import integrators as tools_integrators

parser = argparse.ArgumentParser()
parser.add_argument('--platform', nargs=1, help='OpenMM platform (default: CUDA or OpenCL)')
parser.add_argument('-i', dest='inpfile', help='Input parameter file', required=True)
parser.add_argument('-p', dest='topfile', help='Input topology file', required=True)
parser.add_argument('-c', dest='crdfile', help='Input coordinate file')
parser.add_argument('-ipdb', dest='input_pdbfile', help='Input coordinate pdb file')
parser.add_argument('-t', dest='toppar', help='Input CHARMM-GUI toppar stream file (optional)')
parser.add_argument('-b', dest='sysinfo', help='Input CHARMM-GUI sysinfo stream file (optional)')
parser.add_argument('-ff', dest='fftype', help='Input force field type (default: CHARMM)', default='CHARMM')
parser.add_argument('-icrst', metavar='RSTFILE', dest='icrst', help='Input CHARMM RST file (optional)')
parser.add_argument('-irst', metavar='RSTFILE', dest='irst', help='Input restart file (optional)')
parser.add_argument('-ichk', metavar='CHKFILE', dest='ichk', help='Input checkpoint file (optional)')
parser.add_argument('-opdb', metavar='PDBFILE', dest='opdb', help='Output PDB file (optional)')
parser.add_argument('-orst', metavar='RSTFILE', dest='orst', help='Output restart file (optional)')
parser.add_argument('-ochk', metavar='CHKFILE', dest='ochk', help='Output checkpoint file (optional)')
parser.add_argument('-odcd', metavar='DCDFILE', dest='odcd', help='Output trajectory file (optional)')
parser.add_argument('-rewrap', dest='rewrap', help='Re-wrap the coordinates in a molecular basis (optional)', action='store_true', default=False)
parser.add_argument('--restart-timer', dest='restart_timer', help='Choose whether to restart the timer from zero or not.', action='store_true', default=False)
args = parser.parse_args()

# Load parameters
print("Loading parameters")
inputs = read_inputs(args.inpfile)


print('making top')
top = read_top(args.topfile, args.fftype.upper())
print('done')

crd = read_crd(args.crdfile, args.fftype.upper())

if args.input_pdbfile is not None : 
    crd = PDBFile(args.input_pdbfile, args.fftype.upper())
    params = read_params(args.toppar)
    top = read_box(top, args.sysinfo) if args.sysinfo else gen_box(top, crd)

#if args.fftype.upper() == 'CHARMM':

# Build system
print("building system")
nboptions = dict(nonbondedMethod=inputs.coulomb,
                 nonbondedCutoff=inputs.r_off*nanometers,
                 constraints=inputs.cons,
                 ewaldErrorTolerance=inputs.ewald_Tol,
                 hydrogenMass = 4 * amu)
if inputs.vdw == 'Switch': nboptions['switchDistance'] = inputs.r_on*nanometers
if inputs.vdw == 'LJPME':  nboptions['nonbondedMethod'] = LJPME
if inputs.implicitSolvent:
    nboptions['implicitSolvent'] = inputs.implicitSolvent
    nboptions['implicitSolventSaltConc'] = inputs.implicit_salt*(moles/liter)
    nboptions['temperature'] = inputs.temp*kelvin
    nboptions['soluteDielectric'] = inputs.solut_diele
    nboptions['solventDielectric'] = inputs.solve_diele
    nboptions['gbsaModel'] = inputs.gbsamodel

if   args.fftype.upper() == 'CHARMM': system = top.createSystem(params, **nboptions)
elif args.fftype.upper() == 'AMBER':  
    system = top.createSystem(**nboptions)

# Define your two groups of atoms
group1_indices = [11278, 11292, 11302, 11324, 11334, 11344, 11355, 11369, 11386]
group2_indices = [7065, 7079, 7089, 7111, 7121, 7131, 7142, 7156, 7173]
restraint_force = openmm.CustomCentroidBondForce(2, "40*max(0,distance(g1,g2)-1.5)^2")
restraint_force.addGroup(group1_indices)
restraint_force.addGroup(group2_indices)
system.addForce(restraint_force)

force = openmm.CustomCentroidBondForce(2, "distance(g1,g2)")
force.addGroup(group1_indices)
force.addGroup(group2_indices)
#force = CustomExternalForce('5*(x-1)^2*(x+1)^2 + y^2 + z^2')
#force.addParticle(0, [])
#force.addParticle(1, [])
force.addBond([0, 1], [])
cv = BiasVariable(force,0.6*unit.nanometers,1.5*unit.nanometers,0.05*unit.nanometers,True)
#system.addForce(force)
metadynamics = app.Metadynamics(system, [cv], biasFactor=np.inf, height=0.1*unit.kilojoules_per_mole, temperature=310*kelvin, frequency=500, saveFrequency=inputs.nstdcd, biasDir = 'bias')

if inputs.vdw == 'Force-switch': system = vfswitch(system, top, inputs)
if inputs.lj_lrc == 'yes':
    for force in system.getForces():
        if isinstance(force, NonbondedForce): force.setUseDispersionCorrection(True)
        if isinstance(force, CustomNonbondedForce) and force.getNumTabulatedFunctions() != 1:
            force.setUseLongRangeCorrection(True)
if inputs.e14scale != 1.0:
    for force in system.getForces():
        if isinstance(force, NonbondedForce): nonbonded = force; break
    for i in range(nonbonded.getNumExceptions()):
        atom1, atom2, chg, sig, eps = nonbonded.getExceptionParameters(i)
        nonbonded.setExceptionParameters(i, atom1, atom2, chg*inputs.e14scale, sig, eps)

if inputs.pcouple == 'yes':      system = barostat(system, inputs)
if inputs.rest == 'yes':         system = restraints(system, crd, inputs)

# Define Metadynamics parameters

#integrator = GeodesicBAOABIntegrator(temperature = inputs.temp*kelvin, collision_rate = inputs.fric_coeff/picosecond, timestep =  inputs.dt*picoseconds)
print('done')

# Set platform
DEFAULT_PLATFORMS = 'CUDA', 'OpenCL', 'CPU'
enabled_platforms = [Platform.getPlatform(i).getName() for i in range(Platform.getNumPlatforms())]
if args.platform:
    if not args.platform[0] in enabled_platforms:
        print("Unable to find OpenMM platform '{}'; exiting".format(args.platform[0]), file=sys.stderr)
        sys.exit(1)

    platform = Platform.getPlatformByName(args.platform[0])
else:
    for platform in DEFAULT_PLATFORMS:
        if platform in enabled_platforms:
            platform = Platform.getPlatformByName(platform)
            break
    if isinstance(platform, str):
        print("Unable to find any OpenMM platform; exiting".format(args.platform[0]), file=sys.stderr)
        sys.exit(1)

print("Using platform:", platform.getName())
prop = dict(CudaPrecision='single') if platform.getName() == 'CUDA' else dict()

# Build simulation context
print('building system')

integrator = LangevinMiddleIntegrator(inputs.temp*kelvin, inputs.fric_coeff/picosecond, inputs.dt*picoseconds)
simulation = Simulation(top.topology, system, integrator, platform, prop)
#pdb.set_trace()

if args.icrst:
    charmm_rst = read_charmm_rst(args.icrst)
    simulation.context.setPositions(charmm_rst.positions)
    simulation.context.setVelocities(charmm_rst.velocities)
    simulation.context.setPeriodicBoxVectors(charmm_rst.box[0], charmm_rst.box[1], charmm_rst.box[2])
else:
    simulation.context.setPositions(crd.positions)

if args.irst:
    with open(args.irst, 'r') as f:
        simulation.context.setState(XmlSerializer.deserialize(f.read()))
if args.ichk:
    with open(args.ichk, 'rb') as f:
        simulation.context.loadCheckpoint(f.read())
#if args.restart_timer == True:
#    positions = simulation.context.getState(getPositions=True)
#    print(type(positions.Positions))
#    velocities = simulation.context.getState(getVelocities=True)
#    box_vectors = simulation.context.getSystem().getDefaultPeriodicBoxVectors
#    del integrator
#    integrator = LangevinIntegrator(inputs.temp*kelvin, inputs.fric_coeff/picosecond, inputs.dt*picoseconds)
#    integrator = integrator 
#    simulation2 = Simulation (top.topology, system, integrator, platform, prop)
#    simulation.context.setPositions(positions)
#    simulation.context.setVelocities(velocities)
#    simulation.context.setPeriodicBoxVectors(box_vectors)

if args.restart_timer == True:
    simulation.context.setTime (0 * unit.picoseconds)

# Re-wrap
if args.rewrap:
    simulation = rewrap(simulation)

# Calculate initial system energy
print("\nInitial system energy")
print(simulation.context.getState(getEnergy=True).getPotentialEnergy())

# Energy minimization
if inputs.mini_nstep > 0:
    print("\nEnergy minimization: %s steps" % inputs.mini_nstep)
    simulation.minimizeEnergy(tolerance=inputs.mini_Tol*kilojoule/mole, maxIterations=inputs.mini_nstep)
    print(simulation.context.getState(getEnergy=True).getPotentialEnergy())

# Generate initial velocities
if inputs.gen_vel == 'yes':
    print("\nGenerate initial velocities")
    if inputs.gen_seed:
        simulation.context.setVelocitiesToTemperature(inputs.gen_temp, inputs.gen_seed)
    else:
        simulation.context.setVelocitiesToTemperature(inputs.gen_temp)



#cv_index = metadynamics.addCollectiveVariable("cv", force, bond_index)
#metadynamics.setCollectiveVariableGrid(cv_index, 0.1*unit.nanometers, 0*unit.nanometers, 3.0*unit.nanometers)  # Example grid settings
#metadynamics.setCollectiveVariablePeriodic(cv_index, False)  # This is distance so not periodic



#thermostate = ThermodynamicState(system=system, temperature=inputs.temp*kelvin)
#simulation = MetadynamicsSimulation(thermostate, SamplerState(pdb.positions), cv, metadynamics)
def checkpoint_dcd  (simulation):
    if inputs.nstdcd > 0:
        if not args.odcd: args.odcd = 'output.dcd'
        simulation.reporters.append(DCDReporter(args.odcd, inputs.nstdcd))
    simulation.reporters.append(
        StateDataReporter(sys.stdout, inputs.nstout, step=True, time=True, potentialEnergy=True, temperature=True, progress=True,
                          remainingTime=True, speed=True, totalSteps=inputs.nstep, separator='\t')
    )

def write_restart(simulation):
    # Write restart file
    print ('writing restart')
    if not (args.orst or args.ochk): args.orst = 'output.rst'
    if args.orst:
        state = simulation.context.getState( getPositions=True, getVelocities=True )
        with open(args.orst, 'w') as f:
            f.write(XmlSerializer.serialize(state))
    if args.ochk:
        with open(args.ochk, 'wb') as f:
            f.write(simulation.context.createCheckpoint())
    if args.opdb:
        crd = simulation.context.getState(getPositions=True).getPositions()
        PDBFile.writeFile(top.topology, crd, open(args.opdb, 'w'))




# Production
if inputs.nstep > 0:
    checkpoint_dcd(simulation)
    #t = threading.Thread(target=checkpoint_dcd)
    #t.start ()
    print("\nMD run: %s steps" % inputs.nstep)
    # Simulated annealing?
    if inputs.annealing == 'yes':
        interval = inputs.interval
        temp = inputs.temp_init
        for i in range(inputs.nstep):
            integrator.setTemperature(temp*kelvin)
            #simulation.step(1)
            metadynamics.step(simulation,1)
            temp += interval
    else:
        count = 0 
        while count < inputs.nstep:
            #simulation.step(inputs.nstdcd)
            metadynamics.step(simulation,steps=inputs.nstdcd)
            count = count + inputs.nstdcd 

            t = threading.Thread(target=write_restart,args=(simulation,))
            t.start ()
